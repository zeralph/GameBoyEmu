using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GameBoyTest.Debug;

namespace GameBoyTest.Z80
{
    public class Z80Instruction
    {
        static int s_instNumber=0;

        protected bool m_IsBCInstruction = false;
        protected String m_Name;
        protected String m_Summary;
        protected String m_Flags;
        protected byte[] m_OpCode = {0x03};
        protected byte m_NbCycles;
        protected byte m_NbCyclesMax;
        protected byte m_curNbCycles;
        protected byte m_Lenght;

        //
        protected byte m_CyclesCounter = 0;

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public Z80Instruction()
        {
            m_Name = "NULL";
            m_OpCode = new byte[] {0x3D};    //wrong code
            m_NbCycles = 0;
            m_Flags = "- - - -";
            m_NbCyclesMax = 0;
            m_Lenght = 0;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual void Init()
        {
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual bool IsNOP()
        {
            return false;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual bool IsRET()
        {
            return false;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual bool IsBC()
        {
            return m_IsBCInstruction;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual String ToString( ushort instructionAdress )
        {
            return "";
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual byte GetLenght( ushort instructionAdress )
        {
            return m_Lenght;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public virtual byte GetCurNbCycles(ushort instructionAdress)
        {
            return 0;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public byte[] opCodes
        {
            get { return m_OpCode; }
        }

        public bool isBC
        {
            get { return m_IsBCInstruction; }
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public byte nbCycles
        {
            get { return m_NbCycles; }
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////        
        public byte nbCyclesMax
        {
            get { return m_NbCyclesMax; }
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public String flags
        {
            get { return m_Flags; }
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public String name
        {
            get { return m_Name; }
        }

        //////////////////////////////////////////////////////////////////////
        //
        //  @ return new PC value
        //
        //////////////////////////////////////////////////////////////////////
        public virtual ushort Exec(ushort instructionAdress )
        {
            return 0x00;
        }

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        public String GetDebugInstructionText()
        {
            String pc = String.Format("{0:x2}", GameBoy.Cpu.PC);
            String opcode = "["+String.Format("{0:x2}", m_OpCode)+"]";
            s_instNumber++;
            return (s_instNumber + " - " + opcode + " [" + m_Name + "]\t\tPC=$" + pc + " (" + GameBoy.Cpu.PC + ")\n");
        }

#if DEBUG

        //////////////////////////////////////////////////////////////////////
        //
        //////////////////////////////////////////////////////////////////////
        private void CheckIntruction(ushort oldPC)
        {
   //         DebugFunctions.ASSERT((GameBoy.Cpu.PC - this.GetLenght(oldPC) == oldPC), "Inst " + this.name + " has PC error");
        }
#endif
    }
}
